#include<bits/stdc++.h>

using namespace std;

#define intl long long
#define pii pair<int,int>
#define xx first
#define yy second
#define mp make_pair
#define pb push_back

const int MAXN = 5005;

int pot[MAXN], club[MAXN];
int in[MAXN], day[MAXN];

vector<int>edge[MAXN];
int lft = 5000, rgt, tot;
bool vis[MAXN*2];
int match_in_lft[MAXN*2];

bool isPossible( int u )
{
    //cout << u << " in1 " << endl;
    if( vis[u] ) return false;
    vis[u] = true;
    //cout << u << "  in2 " << endl;
    for( int v: edge[u] )
    {
        if( match_in_lft[v] == -1 )
        {
            //cout << u << " in " << v << endl;
            match_in_lft[v] = u;
            return true;
        }
        int to = match_in_lft[v];
        if( isPossible(to) )
        {
            match_in_lft
            return true;
        }
            
    }
    return false;
}

int ans[MAXN];

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);
    int n, m;
    cin >> n >> m;
    for( int i = 1; i <= n; i++ )
    {
        in[i] = 1;
        cin >> pot[i];
    }
    for( int i = 1; i <= n; i++ )
        cin >> club[i];
    int d;
    cin >> d;
    for( int i = 1; i <= d; i++ )
    {
        cin >> day[i];
        in[ day[i] ] = 0;
    }
    rgt = m;
    tot = lft+rgt;
    for( int i = 1; i <= n; i++ )
    {
        if( in[i] )
        {
            int u = pot[i], v = club[i] + lft;
            edge[u].push_back(v);
            //edge[v].push_back(u);
        }
    }
    int cur = 0;
    memset( match_in_lft, -1, sizeof match_in_lft );
    //while(1);

    for( int i = d; i >= 1; i-- )
    {
        //cout << "st " << cur << endl;
        memset(vis, 0, sizeof vis);
        while( isPossible(cur) && cur <= lft )
        {
            cur++;
            memset( vis, 0, sizeof vis );
        }
//        cout << "graph " << endl;
//        for( int i = 0; i <= 2; i++ )
//        {
//            for( int v: edge[i] )
//                cout << i << " " << v << endl;
//        }

        //cout << i << " match " << cur << endl;
        ans[i]= cur;
        int u = pot[ day[i] ], v = club[ day[i] ] + lft;
        edge[u].push_back(v);
        //edge[v].push_back(u);
    }
    //while(1);
    for( int i = 1; i <= d; i++ )
        cout << ans[i] << endl;


    return 0;
}

